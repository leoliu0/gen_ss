#!/bin/python
from latex_table import latex, star
from pprint import pprint

import sys
import pandas as pd
from scipy.stats import ttest_ind
from collections import OrderedDict
import numpy as np

import argparse


def tt(set1, set2, var):
    res = ttest_ind(set1[var], set2[var], nan_policy="omit")
    return var, res.statistic, star(res.statistic)


def getrow(file, subsample, variables):
    if args.matchsample:
        df2 = pd.read_stata(file)
        df = df2[df2["matched"] == 1]
    else:
        df = pd.read_stata(file)
    try:
        df["XRD"] = df["XRD"] / df["AT"]
        df["SALE"] = np.log(df["SALE"] + 1)
        df["score"] = np.log(df["score"] + 1)
        df["hazard"] = np.log(df["hazard"] + 1)

    except:
        pass
    if args.subsample:
        treated = df[df[subsample] == 1]
        nontreated = df[df[subsample] == 0]
        treat_sum = treated.describe().T[["count", "mean", "50%", "std"]]
        nontreat_sum = nontreated.describe().T[["count", "mean", "50%", "std"]]
        ss = treat_sum.join(nontreat_sum, lsuffix="_treat", rsuffix="_nontreat")
        ss["Diff"] = ss["mean_treat"] - ss["mean_nontreat"]
        t = pd.DataFrame(
            [tt(treated, nontreated, x) for x in df.describe().columns],
            columns=["x", "t", "star"],
        )
        ss = ss.join(t.set_index("x"))
    else:
        ss = df.describe().T[["count", "mean", "50%", "std"]]
    for i in ss.columns:
        if i == "count_treat" or i == "count_nontreat":
            ss[i] = ss[i].map("{:,.0f}".format)
        elif i == "count":
            ss[i] = ss[i].map("{:,.0f}".format)
        elif i != "star":
            if args.rounding:
                ss[i] = ss[i].map(f"{{:,.{args.rounding}f}}".format)
            else:
                ss[i] = ss[i].map("{:,.2f}".format)

    # in some cases, the figure are too large, which takes many spaces in the table. Format these huge figures with scientific notations
    # for j in ss.index:
    #     ss.loc[j]= ss.loc[j].apply(lambda x: format(float(x.replace(",", "")), '.2E') if ('*' not in x) & (len(x) >8) & (x !="") else x)

    try:
        # ss.loc['hazard']= ss.loc['hazard'].apply(lambda x: format(float(x.replace(",", "")), '.3E') if ('*' not in x) & (len(x) >10) & (x !="") else x)
        ss.loc[ss["star"] != "", "Diff"] = ss["Diff"] + "$^{" + ss["star"] + "}$"
        ss = ss.drop(columns="star")
    except:
        pass

    d = OrderedDict()
    for i in variables:
        for k, v in zip(ss.index, ss.values):
            if i==k: 
                d[i] = "&& ".join([str(y) for y in v])
    return d


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("dataset")
    parser.add_argument("varlist")
    parser.add_argument("change_varlist")
    parser.add_argument("-s", "--subsample", default=None, type=str)
    parser.add_argument("-m", "--matchsample", default=None, type=str)
    parser.add_argument("-o", "--output", default=None, type=str)
    parser.add_argument("--stderr", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--rounding", default=2, type=int)

    args = parser.parse_args()

    change_name = dict()
    with open(args.change_varlist) as f:
        for line in f.readlines():
            if line.strip(): 
                v, k = line.split(" ", 1)
                change_name[v.strip().replace('\\\\','\\')] = k.strip().replace('\\\\','\\')

    with open(args.varlist) as f:
        variables = [x.strip() for x in f.readlines()]
        if args.debug:
            pprint('variables.................')
            pprint(variables)

    tb = latex()

    df_dict = getrow(args.dataset, args.subsample, variables)
    if args.debug:
        pprint(df_dict)
        pprint(change_name)

        pprint('mshare\\_sic4' in change_name)

    for i, v in zip(list(df_dict), df_dict.values()):
        # content = change_name.get(i.replace("_", "\\_"),change_name[i]) + "&" + v
        content = change_name[i] + "&" + v
        content = content.replace("$^", "&$^")
        content = content.replace("$&&", "$&")
        # tb.write_plain_row(change_name[i.replace("_", r"\\_")] + "&" + v)
        # print(change_name[i.replace("_", r"\\_")] + "&&" + v)
        # content = change_name[i.replace("_", r"\\_")] + "&&" + v
        # content = content.replace('&&','&',1)
        tb.write_plain_row(content)

    print(
        r"""
    \begin{tabular}{lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}lr@{}l}
    &\multicolumn{8}{c}{\textbf{SE-CEOs}}&\multicolumn{8}{c}{\textbf{SE-CEOs}} \\
    \cline{2-8} \cline{10-16}
    &N && Mean && Median && std. dev && N && Mean && Median && std. dev &&  Diff. && t-stat\\
    \hline
    """,
        file=sys.stderr,
    )
    tb.hline()
    if args.output:
        tb.write_table(args.output, "w")
    else:
        for x in tb.rows:
            print(x)
